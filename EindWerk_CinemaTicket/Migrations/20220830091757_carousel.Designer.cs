// <auto-generated />
using System;
using EindWerk_CinemaTicket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EindWerk_CinemaTicket.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220830091757_carousel")]
    partial class carousel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.CinemaSeat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatId");

                    b.ToTable("CinemaSeats");

                    b.HasData(
                        new
                        {
                            SeatId = 1,
                            SeatNumber = "1A"
                        },
                        new
                        {
                            SeatId = 2,
                            SeatNumber = "2A"
                        },
                        new
                        {
                            SeatId = 3,
                            SeatNumber = "3A"
                        },
                        new
                        {
                            SeatId = 4,
                            SeatNumber = "4A"
                        },
                        new
                        {
                            SeatId = 5,
                            SeatNumber = "5A"
                        },
                        new
                        {
                            SeatId = 6,
                            SeatNumber = "6A"
                        },
                        new
                        {
                            SeatId = 7,
                            SeatNumber = "7A"
                        },
                        new
                        {
                            SeatId = 8,
                            SeatNumber = "8A"
                        },
                        new
                        {
                            SeatId = 9,
                            SeatNumber = "9A"
                        },
                        new
                        {
                            SeatId = 10,
                            SeatNumber = "10A"
                        },
                        new
                        {
                            SeatId = 11,
                            SeatNumber = "1B"
                        },
                        new
                        {
                            SeatId = 12,
                            SeatNumber = "2B"
                        },
                        new
                        {
                            SeatId = 13,
                            SeatNumber = "3B"
                        },
                        new
                        {
                            SeatId = 14,
                            SeatNumber = "4B"
                        },
                        new
                        {
                            SeatId = 15,
                            SeatNumber = "5B"
                        },
                        new
                        {
                            SeatId = 16,
                            SeatNumber = "6B"
                        },
                        new
                        {
                            SeatId = 17,
                            SeatNumber = "7B"
                        },
                        new
                        {
                            SeatId = 18,
                            SeatNumber = "8B"
                        },
                        new
                        {
                            SeatId = 19,
                            SeatNumber = "9B"
                        },
                        new
                        {
                            SeatId = 20,
                            SeatNumber = "10B"
                        },
                        new
                        {
                            SeatId = 21,
                            SeatNumber = "1C"
                        },
                        new
                        {
                            SeatId = 22,
                            SeatNumber = "2C"
                        },
                        new
                        {
                            SeatId = 23,
                            SeatNumber = "3C"
                        },
                        new
                        {
                            SeatId = 24,
                            SeatNumber = "4C"
                        },
                        new
                        {
                            SeatId = 25,
                            SeatNumber = "5C"
                        },
                        new
                        {
                            SeatId = 26,
                            SeatNumber = "6C"
                        },
                        new
                        {
                            SeatId = 27,
                            SeatNumber = "7C"
                        },
                        new
                        {
                            SeatId = 28,
                            SeatNumber = "8C"
                        },
                        new
                        {
                            SeatId = 29,
                            SeatNumber = "9C"
                        },
                        new
                        {
                            SeatId = 30,
                            SeatNumber = "10C"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Comedy"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Drama"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            GenreId = 5,
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 6,
                            GenreName = "Thriller"
                        },
                        new
                        {
                            GenreId = 7,
                            GenreName = "Western"
                        },
                        new
                        {
                            GenreId = 8,
                            GenreName = "Romantic"
                        },
                        new
                        {
                            GenreId = 9,
                            GenreName = "Family"
                        },
                        new
                        {
                            GenreId = 10,
                            GenreName = "Cartoon"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Description = "Professor Albus Dumbledore must assign Newt Scamander and his fellow partners as Grindelwald begins to lead an army to eliminate all Muggles.",
                            GenreId = 4,
                            Img = "~/css/images/Fantastic_Beasts.jpg",
                            MovieName = "Fantastic Beasts: The Secrets of Dumbledore"
                        },
                        new
                        {
                            MovieId = 2,
                            Description = "The untold story of one twelve-year-old's dream to become the world's greatest supervillain.",
                            GenreId = 10,
                            Img = "~/css/images/Minions.jpg",
                            MovieName = "Minions: The Rise of Gru"
                        },
                        new
                        {
                            MovieId = 3,
                            Description = "Jake Sully lives with his newfound family formed on the planet of Pandora. Once a familiar threat returns to finish what was previously started, Jake must work with Neytiri and the army of the Na'vi race to protect their planet.",
                            GenreId = 1,
                            Img = "~/css/images/Avatar.jpg",
                            MovieName = "Avatar: The Way of Water"
                        },
                        new
                        {
                            MovieId = 4,
                            Description = "Five assassins aboard a fast moving bullet train find out their missions have something in common.",
                            GenreId = 6,
                            Img = "~/css/images/Bullet_Train.jpg",
                            MovieName = "Bullet Train"
                        },
                        new
                        {
                            MovieId = 5,
                            Description = "Biochemist Michael Morbius tries to cure himself of a rare blood disease, but he inadvertently infects himself with a form of vampirism instead.",
                            GenreId = 5,
                            Img = "~/css/images/Morbius.jpg",
                            MovieName = "Morbius"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.TicketOrder", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("CartId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SessionId");

                    b.ToTable("TicketOrders");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Timetable", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.HasIndex("MovieId");

                    b.ToTable("Timetables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Movie", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.TicketOrder", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Cart", "Cart")
                        .WithMany("TicketOrders")
                        .HasForeignKey("CartId");

                    b.HasOne("EindWerk_CinemaTicket.Models.CinemaSeat", "CinemaSeat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EindWerk_CinemaTicket.Models.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Timetable", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
