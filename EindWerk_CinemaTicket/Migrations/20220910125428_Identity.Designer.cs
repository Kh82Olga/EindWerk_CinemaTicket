// <auto-generated />
using System;
using EindWerk_CinemaTicket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EindWerk_CinemaTicket.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220910125428_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imdb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Johnny Depp",
                            Imdb = "https://www.imdb.com/name/nm0000136/bio?ref_=nm_ov_bio_sm",
                            ProfilePictureURL = "/images/ImgActors/JohnnyDepp.jpg"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Orlando Bloom",
                            Imdb = "https://www.imdb.com/name/nm0089217/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/OrlandoBloom.jpg"
                        },
                        new
                        {
                            Id = 3,
                            FullName = "Geoffrey Rush",
                            Imdb = "https://www.imdb.com/name/nm0001691/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/GeoffreyRush.jpg"
                        },
                        new
                        {
                            Id = 4,
                            FullName = "Keira Knightley",
                            Imdb = "https://www.imdb.com/name/nm0461136/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/KeiraKnightley.jpg"
                        },
                        new
                        {
                            Id = 5,
                            FullName = "Alan Rickman",
                            Imdb = "https://www.imdb.com/name/nm0000614/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/AlanRickman.jpg"
                        },
                        new
                        {
                            Id = 6,
                            FullName = "Jude Law",
                            Imdb = "https://www.imdb.com/name/nm0000179/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/JudeLaw.jpg"
                        },
                        new
                        {
                            Id = 7,
                            FullName = "Eddie Redmayne",
                            Imdb = "https://www.imdb.com/name/nm1519666/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/EddieRedmayne.jpg"
                        },
                        new
                        {
                            Id = 8,
                            FullName = "Dan Fogler",
                            Imdb = "https://www.imdb.com/name/nm0283945/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/DanFogler.jpg"
                        },
                        new
                        {
                            Id = 9,
                            FullName = "Jack Davenport",
                            Imdb = "https://www.imdb.com/name/nm0202603/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/JackDavenport.jpg"
                        },
                        new
                        {
                            Id = 10,
                            FullName = "Helena Bonham Carter",
                            Imdb = "https://www.imdb.com/name/nm0000307/bio?ref_=nm_ql_1",
                            ProfilePictureURL = "/images/ImgActors/HelenaBCarter.jpg"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovies");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 3
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 4
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 9,
                            MovieId = 5
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 6
                        },
                        new
                        {
                            ActorId = 10,
                            MovieId = 6
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 6
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 7
                        },
                        new
                        {
                            ActorId = 10,
                            MovieId = 7
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 7
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.CinemaHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("CinemaHalls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Revolutionary cinema technology that puts all your senses into action",
                            Logo = "/images/Logo/4dx.jpg",
                            Name = "4DX"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The combination of Dolby Atmos and 4k laser projection",
                            Logo = "/images/Logo/laserultra.jpg",
                            Name = "Laser Ultra"
                        },
                        new
                        {
                            Id = 3,
                            Description = "More picture. More sound. A visual and sound experience",
                            Logo = "/images/Logo/imax.jpg",
                            Name = "IMAX"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Panoramic viewing experience by expanding the screen on the side walls",
                            Logo = "/images/Logo/screenx.jpg",
                            Name = "Screen X"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "/images/GenreCards/Action.jpg",
                            GenreName = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Description = "/images/GenreCards/Comedy.jpg",
                            GenreName = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "/images/GenreCards/Drama.jpg",
                            GenreName = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Description = "/images/GenreCards/Fantasy.jpg",
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            Id = 5,
                            Description = "/images/GenreCards/Horror.jpg",
                            GenreName = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Description = "/images/GenreCards/Crime.jpg",
                            GenreName = "Crime"
                        },
                        new
                        {
                            Id = 7,
                            Description = "/images/GenreCards/Adventure.jpg",
                            GenreName = "Adventure"
                        },
                        new
                        {
                            Id = 8,
                            Description = "/images/GenreCards/Romance.jpg",
                            GenreName = "Romantic"
                        },
                        new
                        {
                            Id = 9,
                            Description = "/images/GenreCards/ScienceFiction.jpg",
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            Id = 10,
                            Description = "/images/GenreCards/Cartoon.jpg",
                            GenreName = "Cartoon"
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CinemaHallId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CinemaHallId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CinemaHallId = 1,
                            Description = "The second installment of the Fantastic Beasts series featuring the adventures of Magizoologist Newt Scamander.",
                            GenreId = 4,
                            Image = "/images/FanBeastsGrindewald.jpg",
                            MovieName = "Fantastic Beasts: The Crimes of Grindelwald",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 2,
                            CinemaHallId = 2,
                            Description = "The adventures of writer Newt Scamander in New York's secret community of witches and wizards seventy years before Harry Potter reads his book in school.",
                            GenreId = 4,
                            Image = "/images/FanBeasts1.jpg",
                            MovieName = "Fantastic Beasts and Where to Find Them",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 3,
                            CinemaHallId = 3,
                            Description = "Jack Sparrow races to recover the heart of Davy Jones to avoid enslaving his soul to Jones' service, as other friends and foes seek the heart for their own agenda as well.",
                            GenreId = 7,
                            Image = "/images/PiratesChest.jpg",
                            MovieName = "Pirates of the Caribbean: Dead Man's Chest",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 4,
                            CinemaHallId = 4,
                            Description = "Captain Barbossa, Will Turner and Elizabeth Swann must sail off the edge of the map, navigate treachery and betrayal, find Jack Sparrow, and make their final alliances for one last decisive battle.",
                            GenreId = 7,
                            Image = "/images/PiratesWorldsEnd.jpg",
                            MovieName = "Pirates of the Caribbean: At World's End",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 5,
                            CinemaHallId = 1,
                            Description = "Blacksmith Will Turner teams up with eccentric pirate Captain Jack Sparrow to save his love, the governor's daughter, from Jack's former pirate allies, who are now undead.",
                            GenreId = 7,
                            Image = "/images/PiratesBlackPearl.jpg",
                            MovieName = "Pirates of the Caribbean: The Curse of the Black Pearl",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 6,
                            CinemaHallId = 2,
                            Description = "Alice is appointed to save her beloved Mad Hatter from deadly grief by travelling back to the past, but this means fatally harming Time himself, the noble clockwork man with the device needed to save the Hatter's family from the Red Queen.",
                            GenreId = 4,
                            Image = "/images/AliceInWonderland.jpg",
                            MovieName = "Alice Through the Looking Glass",
                            Price = 20.0
                        },
                        new
                        {
                            Id = 7,
                            CinemaHallId = 3,
                            Description = "The legendary tale of a barber who returns from wrongful imprisonment to 1840s London, bent on revenge for the rape and death of his wife, and resumes his trade while forming a sinister partnership with his fellow tenant, Mrs. Lovett.",
                            GenreId = 5,
                            Image = "/images/SweeneyTodd.jpg",
                            MovieName = "Sweeney Todd: The Demon Barber of Fleet Street",
                            Price = 20.0
                        });
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.ActorMovie", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EindWerk_CinemaTicket.Models.Movie", "Movie")
                        .WithMany("ActorMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.Movie", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.CinemaHall", "CinemaHall")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaHallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EindWerk_CinemaTicket.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.OrderItem", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EindWerk_CinemaTicket.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EindWerk_CinemaTicket.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EindWerk_CinemaTicket.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EindWerk_CinemaTicket.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
